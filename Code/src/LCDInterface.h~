#ifndef LCD_INTERFACE_H_INCLUDED
#define LCD_INTERFACE_H_INCLUDED

// commands
#define LCD_CLEARDISPLAY 0x01
#define LCD_RETURNHOME 0x02
#define LCD_ENTRYMODESET 0x04
#define LCD_DISPLAYCONTROL 0x08
#define LCD_CURSORSHIFT 0x10
#define LCD_FUNCTIONSET 0x20
#define LCD_SETCGRAMADDR 0x40
#define LCD_SETDDRAMADDR 0x80

// flags for display entry mode
#define LCD_ENTRYRIGHT 0x00
#define LCD_ENTRYLEFT 0x02
#define LCD_ENTRYSHIFTINCREMENT 0x01
#define LCD_ENTRYSHIFTDECREMENT 0x00

// flags for display on/off control
#define LCD_DISPLAYON 0x04
#define LCD_DISPLAYOFF 0x00
#define LCD_CURSORON 0x02
#define LCD_CURSOROFF 0x00
#define LCD_BLINKON 0x01
#define LCD_BLINKOFF 0x00

// flags for display/cursor shift
#define LCD_DISPLAYMOVE 0x08
#define LCD_CURSORMOVE 0x00
#define LCD_MOVERIGHT 0x04
#define LCD_MOVELEFT 0x00

// flags for function set
#define LCD_8BITMODE 0x10
#define LCD_4BITMODE 0x00
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

#define LCD_CONFIG_DISPLAY_FORMAT_TYPE_5x8 (0x00)
#define LCD_CONFIG_DISPLAY_FORMAT_TYPE_5x11 (0x04)

#define LCD_MAX_ROW_COUNT 4
#define LCD_COLLUMN_COUNT 16

extern const unsigned char LCD_ROW_OFFSETS[LCD_MAX_ROW_COUNT];

void LCD_SEND_4BITS(unsigned char value);

void LCD_SEND_8BITS(unsigned char value, unsigned char isCommand);

#define LCD_SEND_COMMAND(value) LCD_SEND_8BITS(value, 1)
#define LCD_SEND_DATA(value) LCD_SEND_8BITS(value, 0)

void LCD_CMD_CLEAR();

void LCD_CMD_SET_CURSOR(unsigned char col, unsigned char row);

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LCD_CMD_UPLOAD_CUSTOM_CHAR(unsigned char location, unsigned char charmap[]);

void LCD_PRINT(unsigned char* str, unsigned char col, unsigned char row)

#define LCD_CMD_SCROLL_DISPLAY_LEFT()  LCD_SEND_COMMAND(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
#define LCD_CMD_SCROLL_DISPLAY_RIGHT() LCD_SEND_COMMAND(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);

void LCD_INIT();

#endif // LCD_INTERFACE_H_INCLUDED

